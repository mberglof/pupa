#!/bin/bash

### - Bash Strcit mode - ###
set -euo pipefail
IFS=$'\n\t'
### - Bash Strict mode - ###

if test ${BASH_VERSION%%.*} -lt 4; then
  echo "This script requires Bash version 4 or higher"
  exit 1
fi

### - Logging - ###
LOGLEVEL=${PUPA_LOGLEVEL:-INFO}
declare -A LOG_AT
LOG_AT['DEBUG']=5
LOG_AT['INFO']=4
LOG_AT['WARN']=3
LOG_AT['ERR']=2
LOG_AT['CRIT']=1

if tty -s;then
    typeset -r RED=${RED:-$(tput setaf 1)}
    typeset -r GREEN=${GREEN:-$(tput setaf 2)}
    typeset -r YLW=${YLW:-$(tput setaf 3)}
    typeset -r BLUE=${BLUE:-$(tput setaf 4)}
    typeset -r PURPLE=${URPLE:-$(tput setaf 5)}
    typeset -r CYAN=${CYAN:-$(tput setaf 6)}
    typeset -r RESET=${RESET:-$(tput sgr0)}
    typeset -r BOLD=${BOLD:-$(tput bold)}
else
    typeset -r RED=
    typeset -r GREEN=
    typeset -r YLW=
    typeset -r BLUE=
    typeset -r PURPLE=
    typeset -r CYAN=
    typeset -r RESET=
    typeset -r BOLD=
fi

function timestamp {
  # Current time including UTC offset
  date +'%H:%M:%S %z'
}

function log {
  # Print a message on the console
  if test $# -eq 0; then
    log "log() needs at least a message to log" ERR
    return
  fi
  msg=${1}
  level=${2:-INFO}

  if test ${level} == 'INFO'; then
    lcolour=$GREEN
  elif test ${level} == 'WARN'; then
    lcolour=$YELLOW
  elif test ${level} == 'ERR'; then
    lcolour=$RED
  elif test ${level} == 'CRIT'; then
    lcolour=$PURPLE
  elif test ${level} == 'DEBUG'; then
    lcolour=$BLUE
  fi
  # Check at which level we're configured to log
  if test ${LOG_AT[${LOGLEVEL}]} -ge ${LOG_AT[${level}]}; then
    echo "${BOLD}$(timestamp) ${lcolour}$(printf %-5s ${level})${RESET} ${msg}" | fold -w120 -s | sed '2~1s/^/                     /'
  fi
}
### - Logging - ###

### - Testing prereqs -  ###
function debugging {
  # Check if we're in DEBUG mode
  test ${LOG_AT[${LOGLEVEL}]} -eq ${LOG_AT['DEBUG']}
}

if [ "${EUID}" -ne 0 ]; then
  # Ensure we're running as root/superuser
  log "Bootstrapping script needs to run as ${RED}root${RESET}" ERR
  exit 1
fi
command -v lsb_release >/dev/null 2>&1 || { log >&2 "lsb_release is not installed, ${PURPLE}aborting${RESET}" CRIT; exit 1; }
command -v curl >/dev/null 2>&1 || { log >&2 "curl is not installed, ${PURPLE}aborting${RESET}" CRIT; exit 1; }
command -v git >/dev/null 2>&1 || { log >&2 "git is not installed, ${PURPLE}aborting${RESET}" CRIT; exit 1; }
### - Testing prereqs - ###

# Find the OS codename
if [ `which lsb_release` ]; then
  distr=$(lsb_release --id -s)
  rel=$(lsb_release --codename -s)
  ver=$(lsb_release -s -r | awk -F. '{print $1}')
elif [ -f /etc/redhat-release ]; then
  distr=$(awk '{print $1}' /etc/redhat-release)
  rel=$(awk '{print $1}' /etc/redhat-release)
  VERSION=$(egrep -o "[[:digit:]]" /etc/redhat-release) || exit 1
  MAJOR=$(echo $VERSION | awk '{print $1}')
  ver="${MAJOR}"
fi

# Version of Puppet Collection
pc=1
# Where this script is located
pupa_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)
# Puppetlabs bin/ dir
plbin='/opt/puppetlabs/puppet/bin'
pletc='/etc/puppetlabs'

function papply {
    if debugging; then
      log "Going to execute: ${plbin}/puppet apply ${1}" DEBUG
      FACTER_PUPADIR="${pupa_dir}" "${plbin}/puppet" apply "${1}" "--prerun_command=''" "--postrun_command=''"
    else
      FACTER_PUPADIR="${pupa_dir}" "${plbin}/puppet" apply "${1}" "--prerun_command=''" "--postrun_command=''" > /dev/null 2>&1
    fi
}

function install_puppetrepo {
  case $distr in
    Debian|Ubuntu)
      install_puppetrepo_deb
    ;;
    RedHat|CentOS)
      install_puppetrepo_el
    ;;
  esac
}

function install_puppetrepo_el {
  if test ! -f '/etc/yum.repos.d/puppetlabs-pc1.repo'; then
    log "Installing Puppetlabs YUM repo entries for ${distr^} ${rel^}"
    if debugging; then
      yum install -y "http://yum.puppetlabs.com/puppetlabs-release-pc1-el-${ver}.noarch.rpm"
    else
      yum install -y "http://yum.puppetlabs.com/puppetlabs-release-pc1-el-${ver}.noarch.rpm"
    fi
  else
    log "Puppetlabs YUM repo entries already installed, skipping"
  fi
}

function install_puppetrepo_deb {
  if test ! -f '/etc/apt/sources.list.d/puppetlabs-pc1.list'; then
    log "Fetching PC${pc} release package for ${distr^} ${rel^}"
    if debugging; then
      curl -L -O "https://apt.puppetlabs.com/puppetlabs-release-pc${pc}-${rel}.deb"
    else
      curl -s -L -O "https://apt.puppetlabs.com/puppetlabs-release-pc${pc}-${rel}.deb"
    fi
    log "Installing Puppetlabs APT sources entries for ${distr^} ${rel^}"
    if debugging; then
      dpkg -i "puppetlabs-release-pc${pc}-${rel}.deb"
    else
      dpkg -i "puppetlabs-release-pc${pc}-${rel}.deb" >/dev/null 2>&1
    fi
  else
    log "Puppetlabs APT source entries already installed, skipping"
  fi
}

function refresh_yum_sources {
  log "Refreshing YUM repos"
  if debugging; then
    yum update
  else
    apt-get update -qq > /dev/null 2>&1
  fi
  log "Done refreshing APT sources"
}

function refresh_apt_sources {
  log "Refreshing APT sources"
  if debugging; then
    apt-get update
  else
    apt-get update -qq > /dev/null 2>&1
  fi
  log "Done refreshing APT sources"
}

function setup_puppet {
  log "Installing and configuring puppet"
  if test ! -f "${plbin}/puppet"; then
    case $distr in
      Debian|Ubuntu)
        refresh_apt_sources
        if debugging; then
          apt-get install puppet-agent
        else
          DEBIAN_FRONTEND=noninteractive apt-get install -qq --yes --force-yes puppet-agent > /dev/null 2>&1
        fi
      ;;
      RedHat|CentOS)
        if debugging; then
          yum install puppet-agent
        else
          yum install puppet-agent --force
        fi
      ;;
    esac
  fi
  papply "${pupa_dir}/manifests/puppet.pp"
  log "Successfully installed and configured puppet"
}

function setup_hiera {
  log "Installing and configuring hiera, hiera-eyaml"
  papply "${pupa_dir}/manifests/hiera.pp"
  log "Successfully installed and configured hiera-eyaml"
}

function setup_r10k {
  log "Installing and configuring r10k"
  papply "${pupa_dir}/manifests/r10k.pp"
  log "Successfully installed and configured r10k"
}

function setup_mcollective {
  log "Disabling mcollective"
  papply "${pupa_dir}/manifests/mcollective.pp"
  log "Successfully disabled mcollective"
}

function main {
  install_puppetrepo
  setup_puppet
  setup_hiera
  setup_r10k
  setup_mcollective
}

log "Bootstrapping Puppet on ${YLW}$(hostname --fqdn)${RESET}"
main
log "Done configuring Puppet on ${YLW}$(hostname --fqdn)${RESET}"
log "Please ensure to ${RED}create/upload${RESET} the hiera-eyaml keys in ${pletc}/keys"
log "First run '${plbin}/r10k deploy environment -pv' to deploy your code"
log "And then run '${plbin}/puppet apply ${pletc}/code/environments/production/manifests/site.pp' to kick of a Puppet run"
exit 0
